import{u as o}from"./VerificationSubmission-CNoSrCdk.js";import{g as u,bb as d,bc as l,B as S,bd as f,M as O}from"./useFiles-BVV8mgFx.js";import"./StringUtils-BmiE0y30.js";import{h as i,H as n}from"./index-CkKFZ11r.js";import{j as _}from"./jsx-runtime-D_zvdyIk.js";import{a as T}from"./MarkdownGithub-5elzLDLd.js";import"./SynapseConstants-Bjk2AzpK.js";import"./OrientationBanner-BtSSrosl.js";import"./index-CdNBkwvZ.js";import"./index-Dcva6Igs.js";import"./iframe-CCoJg556.js";import"./spreadSx-CwcO6WA9.js";import"./react-DC570P_z.js";import"./FullWidthAlert-Df8-vKnd.js";import"./Alert-cS9oZwPN.js";import"./createTheme-B26sKtvN.js";import"./DefaultPropsProvider-YJnmDfI4.js";import"./useSlot-Rmgo1ffi.js";import"./useForkRef-DBtevC74.js";import"./createSimplePaletteValueFilter-DNddmZR9.js";import"./createSvgIcon-BEKnxyJh.js";import"./Close-B4nVTahf.js";import"./IconButton-Cl4RV6RG.js";import"./useTimeout-C8GfIPaa.js";import"./ButtonBase-u3iQxWhW.js";import"./isFocusVisible-B8k4qzLc.js";import"./CircularProgress-BN2C8Rmz.js";import"./Paper-CNxH606E.js";import"./useTheme-chxq-tHR.js";import"./useTheme-CCL95tAL.js";import"./Stack-CTl5yyJr.js";import"./extendSxProp-BVfK8pxE.js";import"./getThemeProps-C0vT6Df8.js";import"./Box-CkbFs_a4.js";import"./AlertTitle-CaC_WgAh.js";import"./Typography-CwvWcdql.js";import"./index-hLcTFsES.js";import"./ClickAwayListener-C7dbeoYX.js";import"./getReactElementRef-7JBTpt97.js";import"./index-CJdyCa67.js";import"./index-DBA9oQSP.js";import"./ownerDocument-DW-IO8s5.js";import"./Grow-ADuAH2zU.js";import"./Tooltip-C31LWaVV.js";import"./index-37XzZJ7t.js";import"./useControlled-BLD8yqHo.js";import"./Popper-B9lMpEBY.js";import"./Button-DMnAdGab.js";import"./fetchWithExponentialTimeout-CXmnpl-T.js";import"./useQuery-DLOdcNUn.js";import"./QueryClientProvider-CF8RF_Ej.js";import"./Link-DFT_SKuP.js";import"./Collapse-BP6-ZFOW.js";import"./_baseUniq-JQAenPva.js";import"./_Uint8Array-BfAIAttP.js";import"./isArray-lBX6a_CU.js";import"./_getTag-CCOx2CzZ.js";import"./isEqual-BORxkXdf.js";import"./merge-zeIWO4FX.js";import"./_initCloneObject-Dv1PRlE8.js";import"./identity-DKeuBCMA.js";import"./tinycolor-Begke6kS.js";import"./Fade-DSwTLMOF.js";import"./inputBaseClasses-BJfanctR.js";import"./calculateFriendlyFileSize-Bx2GrSlG.js";import"./CheckCircleTwoTone-DHO8WRy1.js";import"./InfoTwoTone-CXFwwHlq.js";import"./useMutation-Bexl4Vhr.js";import"./dayjs.min-4GXyklly.js";import"./chunk-AYJ5UCUI-B7sysu72.js";import"./cloneDeep-CQMH2xKb.js";import"./Skeleton-DPcDmHUt.js";import"./SkeletonButton-Cl3vLGWX.js";import"./SkeletonInlineBlock-adFhimf1.js";import"./SkeletonTable-BzqVahFP.js";import"./times-Conr0Av0.js";import"./toInteger-7hiB9XYC.js";import"./isSymbol-DlK7yVTc.js";import"./SkeletonParagraph-C-rmnhGg.js";import"./MarkdownSynapse-C9EbAddh.js";const v={termsOfServiceUrl:"https://gh.com/tos.md",latestTermsOfServiceVersion:"1.0.0",currentRequirement:{requirementDate:"2024-11-01T00:00:00Z",minimumTermsOfServiceVersion:"0.0.0"}},h={userId:"12345",lastAgreementDate:null,lastAgreementVersion:null,userCurrentTermsOfServiceState:o.MUST_AGREE_NOW};o.MUST_AGREE_NOW;o.MUST_AGREE_SOON;o.UP_TO_DATE;const g=(r=u(S.REPO_ENDPOINT),e=h)=>[i.get(`${r}${d}`,()=>n.json(e,{status:201})),i.get(`${r}${l}`,()=>n.json(v,{status:201}))];function m(r){const{data:e}=f(),c=e==null?void 0:e.latestTermsOfServiceVersion;return _.jsx(T,{...r,tagName:c})}try{m.displayName="GovernanceMarkdownGithub",m.__docgenInfo={description:"Loads the version of the Governance Github Markdown file that the Synapse backend determines is the current version",displayName:"GovernanceMarkdownGithub",props:{repoOwner:{defaultValue:null,description:"",name:"repoOwner",required:!0,type:{name:"string"}},repoName:{defaultValue:null,description:"",name:"repoName",required:!0,type:{name:"string"}},filePath:{defaultValue:null,description:"",name:"filePath",required:!0,type:{name:"string"}},showDownloadButton:{defaultValue:null,description:"",name:"showDownloadButton",required:!1,type:{name:"boolean"}}}}}catch{}const Zr={title:"Markdown/GovernanceMarkdownGithub",component:m},t={args:{repoOwner:"Sage-Bionetworks",repoName:"Sage-Governance-Documents",filePath:"Terms.md"},parameters:{stack:"mock",msw:{handlers:[...g(O)]}}};var p,s,a;t.parameters={...t.parameters,docs:{...(p=t.parameters)==null?void 0:p.docs,source:{originalSource:`{
  args: {
    repoOwner: 'Sage-Bionetworks',
    repoName: 'Sage-Governance-Documents',
    filePath: 'Terms.md'
  },
  parameters: {
    stack: 'mock',
    msw: {
      handlers: [...getTermsOfServiceHandlers(MOCK_REPO_ORIGIN)]
    }
  }
}`,...(a=(s=t.parameters)==null?void 0:s.docs)==null?void 0:a.source}}};const zr=["TermsOfServiceDemo"];export{t as TermsOfServiceDemo,zr as __namedExportsOrder,Zr as default};
